{"version":3,"sources":["contexts/PageContext.tsx","components/ContactViewModal.tsx","shared/contactFunctions.ts","components/ContactsTable.tsx","components/ContactsCards.tsx","contexts/FormContext.tsx","components/form/TextInput.tsx","components/form/BirthdayInput.tsx","types/Contact.ts","components/form/GenderSelect.tsx","components/form/ContactNumbersInput.tsx","components/form/Form.tsx","pages/ContactsList.tsx","shared/validations.ts","pages/ContactCreate.tsx","pages/ContactUpdate.tsx","sampleContacts.ts","hooks/useContacts.ts","App.tsx","index.tsx"],"names":["Page","ProgressBar","progress","clampedProgressPercent","Math","max","min","toString","ReactDOM","createPortal","className","style","height","position","top","width","opacity","document","querySelector","PageContext","React","createContext","PageContextProvider","initialPage","children","useState","currentPage","_setCurrentPage","animate","progressState","setProgressState","payload","setPayload","Provider","value","setCurrentPage","page","setTimeout","PagePortal","showFor","pageContext","useContext","ContactView","contact","onHide","modalDivRef","useRef","modal","useEffect","current","Modal","show","modalRef","addEventListener","removeEventListener","date","firstName","lastName","middleName","birthday","gender","address","emailAddress","contactNumbers","companyName","ref","id","tabIndex","type","data-bs-dismiss","toLocaleDateString","dateStyle","addressLine","cityProvince","country","map","contactNumber","i","getPrimaryContactNumber","contacts","getAgeFromBirthday","ageInMs","Date","now","getTime","floor","formatAsISODate","day","getDate","padStart","month","getMonth","year","getFullYear","ContactsTable","setContactShown","handleDelete","scope","c","ContactsListRow","onView","onEdit","onDelete","length","fullName","age","primaryContact","role","onClick","e","stopPropagation","UPDATE","ContactsCards","props","ContactCard","FormContext","undefined","Error","createFormContext","useFormContext","FormContextProvider","TextInput","name","label","required","values","errors","handleChange","handleBlur","isInvalid","touched","htmlFor","onChange","onBlur","BirthdayInput","Gender","MALE","FEMALE","NONBINARY","GenderSelect","listOfGenders","Object","ContactNumbersInput","initialValue","setFormValues","localValues","setLocalValues","handleSetPrimaryNumber","index","contactsCopy","slice","indexOfContact","indexOf","oldHead","setPrimaryContactNumber","number","pattern","inputMode","newValue","target","RegExp","test","handleLocalChange","filter","_","Form","initialValues","onSubmit","validate","setFormErrors","setTouched","formRef","handleSubmit","preventDefault","keys","reduce","previousState","key","state","noValidate","ContactsList","deleteContact","contactShown","email","searchQuery","setSearchQuery","listProps","query","contactNames","some","toLowerCase","includes","contactMatchesQuery","window","confirm","CREATE","ContactsFilter","onFilter","trim","isNullOrWhitespace","validateContact","ContactCreate","createContact","isSubmitting","setIsSubmitting","goBack","LIST","then","console","log","disabled","ContactUpdate","updateContact","ContactUpdateErrorMessage","updatedContact","catch","err","error","sampleContacts","delay","Promise","resolve","App","setContacts","isExistingContact","testContact","find","newContact","a","oldContacts","contactToDelete","addContact","useContactsDelay","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.81eb68fc.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Contact } from '../types/Contact';\n\n/** Enumerates the pages of the application */\nexport enum Page {\n  CREATE,\n  LIST,\n  UPDATE\n}\n\ntype PageContextValue = {\n  currentPage: Page;\n  setCurrentPage: (page: Page, payload?: Contact) => void;\n  payload?: Contact;\n}\n\n/** Displays a Progress Bar stuck to the top of the viewport */\nconst ProgressBar = ({ progress }: { progress: number }) => {\n  // Clamp progress to the range [0, 1]\n  const clampedProgressPercent = Math.max(0, Math.min(100, progress)).toString() + \"%\";\n\n  return ReactDOM.createPortal(\n    (<div \n      className=\"progress w-100 mb-4 shadow-sm\" \n      style={\n        { \n          height: \"3px\",\n          position: \"fixed\",\n          top: 0,\n        }}>\n      <div\n        className=\"progress-bar bg-info\"\n        style={\n          {\n            width: clampedProgressPercent,\n            opacity: (progress / 100)\n          }} />\n      </div>\n    ), document.querySelector('body') as Element);\n}\n\nexport const PageContext = React.createContext<PageContextValue>(null!);\n\ntype PageContextProviderProps = {\n  initialPage: Page;\n  children: React.ReactNode;\n}\n\nexport function PageContextProvider({ initialPage, children }: PageContextProviderProps): JSX.Element {\n  const [currentPage, _setCurrentPage] = React.useState<Page>(initialPage);\n  const [progressState, setProgressState] = useState({ progress: 0, animate: \"none\" }); // HACK: Progress bar is meh code, best to take out before presenting\n  const [payload, setPayload] = useState<Contact | undefined>()\n\n  const PAGE_LOAD_DELAY_TIME = 600;\n  // Payload can be used to simulate how a contact can be specified when changing pages\n  // e.g. /contact/1, etc.\n  function setCurrentPage(page: Page, payload?: Contact) {\n    setProgressState({ progress: 100, animate: \"\" });\n    payload && setPayload(payload);\n    setTimeout(() => { \n      _setCurrentPage(page); \n      setProgressState({ progress: 0, animate: \"none !important\" }); \n    }, PAGE_LOAD_DELAY_TIME);\n  }\n\n  return (\n    <PageContext.Provider value={{ currentPage, setCurrentPage, payload }}>\n      <ProgressBar progress={progressState.progress} />\n      { children}\n    </PageContext.Provider>\n  )\n}\n\ntype PagePortalProps = {\n  showFor: Page;\n  children: React.ReactNode;\n}\n\nexport function PagePortal({ showFor, children }: PagePortalProps): JSX.Element {\n  const pageContext = React.useContext(PageContext);\n\n  return (\n    <>\n      {showFor === pageContext?.currentPage && children}\n    </>\n  );\n}","import Modal from 'bootstrap/js/dist/modal';\nimport React, { useRef } from 'react';\nimport { Contact } from '../types/Contact';\n\n/** Format given date according to US english date */\nconst formatDate = (date: Date) => {\n  return date.toLocaleDateString(\"en-US\", {\n    dateStyle: \"medium\"\n  });\n}\n\ntype ContactViewProps = {\n  contact: Contact;\n  onHide: () => void;\n}\n\nconst ContactView = ({ contact, onHide }: ContactViewProps): JSX.Element => {\n  const modalDivRef = React.useRef<HTMLDivElement>(null);\n  const modal = useRef<Modal>();\n\n  React.useEffect(() => {\n    modal.current = new Modal(modalDivRef.current as Element);\n    modal.current?.show();\n  }, []);\n\n  // Setup event handler\n  React.useEffect(() => {\n    const modalRef = modalDivRef.current;\n\n    modalRef?.addEventListener('hidden.bs.modal', onHide);\n\n    return function cleanup() {\n      modalRef?.removeEventListener('hidden.bs.modal', onHide);\n    }\n  }, [onHide]);\n\n  const {\n    firstName,\n    lastName,\n    middleName,\n    birthday,\n    gender,\n    address,\n    emailAddress,\n    contactNumbers,\n    companyName\n  } = contact;\n\n  return (\n    <div ref={modalDivRef} className=\"modal fade\" id=\"view-contact\">\n      <div className=\"modal-dialog modal-fullscreen-md-down\" tabIndex={-1}>\n        <div className=\"modal-content\">\n          <div className=\"modal-header\">\n            <h2 className=\"modal-title\">\n              Contact:&nbsp;\n              <small className=\"text-muted\">{firstName}</small>\n            </h2>\n            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n          </div>\n          <div className=\"modal-body\">\n            <dl className=\"row\">\n              <div className=\"col-sm-4\">\n                <dt>First Name</dt>\n                <dd>{firstName}</dd>\n              </div>\n\n              <div className=\"col-sm-4\">\n                <dt>Middle Name</dt>\n                <dd>{middleName}</dd>\n              </div>\n\n              <div className=\"col-sm-4\">\n                <dt>Last Name</dt>\n                <dd>{lastName}</dd>\n              </div>\n\n              <div className=\"row row-cols-1 row-cols-md-2\">\n                <dt className=\"col order-0\">Birthday</dt>\n                <dd className=\"col order-md-2\">{formatDate(birthday)}</dd>\n\n                <dt className=\"col order-md-1\">Gender</dt>\n                <dd className=\"col order-md-3\">{gender ? gender : \"Not specified\"}</dd>\n              </div>\n              \n              <dt>Address</dt>\n              <dd>\n                <dl className=\"row row-cols-md-1\">\n                  <dt className=\"text-muted small\">Address Line</dt>\n                  <dd className=\"\">{address.addressLine}</dd>\n\n                  <dt className=\"text-muted small\">City/Province</dt>\n                  <dd className=\"\">{address.cityProvince}</dd>\n                  \n                  <dt className=\"text-muted small\">Country</dt>\n                  <dd className=\"\">{address.country}</dd>\n                </dl>\n              </dd>\n\n              <dt>Email Address</dt>\n              <dd>{emailAddress}</dd>\n\n              <dt>Contact Numbers:</dt>\n              <dd>\n                <ul>\n                  {contactNumbers.map((contactNumber, i) => {\n                    // Assume that first contact number is primary\n                    return (<li key={i} className={(i === 0) ? \"text-primary\" : \"\"}>{contactNumber.toString() + (i === 0 ? \" (Primary)\" : \"\")}</li>);\n                  })}\n                </ul>\n              </dd>\n\n              <dt>Company Name</dt>\n              <dd>{companyName ? companyName : \"Not specified\"}</dd>\n            </dl>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ContactView;","/**\n * Returns the list of contacts with the given contact as the primary contact.\n*/\n\nexport function setPrimaryContactNumber(contacts: string[], contact: string): string[] {\n  let contactsCopy = contacts.slice();\n  const indexOfContact = contactsCopy.indexOf(contact);\n\n  // Contact not in contacts\n  if (indexOfContact === -1)\n    throw new Error(`${contact} not in contacts`);\n\n  const oldHead = contactsCopy[0];\n  contactsCopy[0] = contactsCopy[indexOfContact];\n  contactsCopy[indexOfContact] = oldHead;\n\n  return contactsCopy;\n}\n/** Gets the primary contact number from a list of contact numbers */\n\nexport function getPrimaryContactNumber(contacts: string[]): string | undefined {\n  // Assume that the primary contact is first\n  return contacts[0];\n}\n/** Gets person's age as of the time of function call from their birthday.\n * Assumes 31,556,952,000 milliseconds in a year.\n*/\n\nexport function getAgeFromBirthday(birthday: Date): Number {\n  const ageInMs = Date.now() - birthday.getTime();\n  // Use naive way of aonverting ms to year\n  // 1000 ms in second\n  // 60 * 60 * 24 seconds in a day\n  // 365.2425 days in a year per wikipedia\n  // thus, 31,556,952,000 in a year\n  const msInAYear = 31556952000;\n  return Math.floor(ageInMs / msInAYear);\n}\n\n/** Helper method to turn Date object into an ISO-format date string (i.e. yyyy-MM-dd)\n * for setting date input value\n */\n export function formatAsISODate(date: Date) {\n  const day = date.getDate().toString().padStart(2, '0');\n  const month = (date.getMonth() + 1).toString().padStart(2, '0');\n  const year = date.getFullYear();\n\n  return `${year}-${month}-${day}`;\n}\n","import { Contact } from \"../types/Contact\";\nimport { getAgeFromBirthday, getPrimaryContactNumber } from \"../shared/contactFunctions\";\nimport { Page, PageContext } from \"../contexts/PageContext\";\nimport { useContext } from \"react\";\n\ntype ContactsTableProps = {\n  contacts: Contact[];\n  setContactShown: (c: Contact) => void;\n  handleDelete: (c: Contact) => void;\n}\n\nexport default function ContactsTable({ contacts, setContactShown, handleDelete }: ContactsTableProps) {\n  return (\n  <div className=\"table-responsive\">\n    <table className=\"table table-hover\">\n      {/* Weird bug on Edge: Header bottom border disappears when hovering over first row */}\n      <thead>\n        <tr>\n          <th scope=\"col\">Name</th>\n          <th scope=\"col\">Age</th>\n          <th scope=\"col\">City/Province</th>\n          <th scope=\"col\">Email</th>\n          <th scope=\"col\">Contact Number (Primary)</th>\n          <th scope=\"col\">Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        {contacts\n          ? contacts.map((c) => <ContactsListRow\n            key={c.id}\n            contact={c}\n            onView={() => setContactShown(c)}\n            onEdit={() => { }}\n            onDelete={() => handleDelete(c)} />)\n          : \"Loading...\"}\n      </tbody>\n    </table>\n\n    {contacts?.length === 0 && <p className=\"text-center text-secondary\">You have no contacts yet. Add a contact by clicking on the <span className=\"text-primary\"><strong>Create Contact</strong></span> button above.</p>}\n  </div>);\n}\n\ntype ContactsListRowProps = {\n  contact: Contact;\n  onView: () => void;\n  onEdit: () => void;\n  onDelete: () => void;\n}\n\nfunction ContactsListRow({ contact, onView, onDelete }: ContactsListRowProps): JSX.Element {\n  const {\n    firstName,\n    lastName,\n    middleName,\n    birthday,\n    address,\n    emailAddress,\n    contactNumbers\n  } = contact;\n\n  const { setCurrentPage } = useContext(PageContext);\n\n  const fullName = `${lastName}, ${firstName} ${middleName[0]}.`;\n  const age = getAgeFromBirthday(birthday);\n  const primaryContact = getPrimaryContactNumber(contactNumbers);\n\n  return (\n    <tr role=\"button\" onClick={onView}>\n      <td>{fullName}</td>\n      <td>{age}</td>\n      <td>{address.cityProvince}</td>\n      <td>{emailAddress}</td>\n      <td>{primaryContact}</td>\n      <td>\n        <button className=\"btn btn-secondary me-2\" onClick={(e) => { e.stopPropagation(); setCurrentPage(Page.UPDATE, contact) }}>Update</button>\n        <button className=\"btn btn-danger\" onClick={(e) => { e.stopPropagation(); onDelete() }}>Delete</button>\n      </td>\n    </tr>\n  )\n}","import { Contact } from \"../types/Contact\";\nimport { getAgeFromBirthday, getPrimaryContactNumber } from \"../shared/contactFunctions\";\nimport { PageContext, Page } from \"../contexts/PageContext\";\nimport { useContext } from \"react\";\n\ntype ContactsCardsProps = {\n  contacts: Contact[];\n  setContactShown: (c: Contact) => void;\n  handleDelete: (c: Contact) => void;\n}\n\n/** Renders a mobile-friendly, cards-based list of contacts */\nexport default function ContactsCards({ contacts, ...props }: ContactsCardsProps) {\n  return (\n    <>\n      {\n        contacts.map(contact => <ContactCard key={contact.id} contact={contact} {...props} />)\n      }\n      {\n        contacts.length === 0\n        && <p className=\"text-center text-secondary\">You have no contacts yet. Add a contact by clicking on the <span className=\"text-primary\"><strong>Create Contact</strong></span> button above.</p>\n      }\n    </>\n  );\n}\n\ntype ContactCardProps = {\n  contact: Contact;\n  setContactShown: (c: Contact) => void;\n  handleDelete: (c: Contact) => void;\n}\n\nfunction ContactCard({ contact, setContactShown, handleDelete }: ContactCardProps) {\n    const {\n      firstName,\n      lastName,\n      middleName,\n      birthday,\n      address,\n      emailAddress,\n      contactNumbers\n    } = contact;\n\n    const { setCurrentPage } = useContext(PageContext);\n\n    const fullName = `${lastName}, ${firstName} ${middleName[0]}.`;\n    const age = getAgeFromBirthday(birthday);\n    const primaryContact = getPrimaryContactNumber(contactNumbers);\n\n    return (\n      <div className=\"card mb-2 bg-light\">\n        <div className=\"card-body\">\n          <h2 className=\"card-title fs-3\">\n            <span className=\"text-secondary\">Name: </span>\n            {fullName}\n          </h2>\n          <dl className=\"row row-cols-2\">\n            <dt>Age</dt>\n            <dd>{age} years old</dd>\n            <dt>City/Province</dt>\n            <dd>{address.cityProvince}</dd>\n            <dt>Email</dt>\n            <dd>{emailAddress}</dd>\n            <dt>Primary Contact Number</dt>\n            <dd>{primaryContact}</dd>\n          </dl>\n          \n          <div className=\"btn-group btn-group-lg w-100\">\n            <button\n              className=\"btn btn-outline-primary\"\n              onClick={() => setContactShown(contact)} >View</button>\n            <button\n              className=\"btn btn-secondary\"\n              onClick={() => setCurrentPage(Page.UPDATE, contact)}>Update</button>\n            <button\n              className=\"btn btn-danger\"\n              onClick={() => handleDelete(contact)}>Delete</button>\n          </div>\n        \n        </div>\n      </div>\n    );\n}","import React, { useContext } from 'react';\nimport { FormInput } from \"../types/FormTypes\";\n\ntype FormContextType<T> = {\n  values: T;\n  handleChange: React.FormEventHandler<FormInput>;\n  errors: Partial<T>;\n  setFormValues: React.Dispatch<React.SetStateAction<T>>;\n  touched: Partial<T>;\n  handleBlur: React.FocusEventHandler<FormInput>;\n};\n \n\n// Generic context magic with thanks to https://stackoverflow.com/questions/60725621/react-context-with-generics\nfunction createFormContext() {\n  // Code reference: https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/context\n  const FormContext = React.createContext<FormContextType<any>>(undefined!);\n\n  function useFormContext<T>() {\n    const c = useContext<FormContextType<T>>(FormContext);\n    if (c === undefined) {\n      throw new Error(\"useFormContext must be used inside a FormContextProvider with a value\");\n    }\n    return c;\n  }\n\n  return [useFormContext, FormContext.Provider] as const;\n}\n\nexport const [useFormContext, FormContextProvider] = createFormContext();","import { useFormContext } from '../../contexts/FormContext';\nimport { FormValues, FieldProps } from '../../types/FormTypes';\n\ntype TextInputProps = {\n  /** Text to be shown for the field <label> */\n  label: string;\n  required?: boolean;\n  type?: string;\n} & FieldProps;\n\n/** Renders a controlled \\<input type=\"text\"\\> */\nexport function TextInput({ name, label, required, type }: TextInputProps) {\n  const { values, errors, handleChange, handleBlur, touched } = useFormContext<FormValues>();\n\n  const isInvalid = touched[name] && errors[name];\n\n  return (\n    <div className=\"mb-2 row\">\n      <div className=\"col-4\">\n        <label htmlFor={name} className={`form-label text-wrap ${(required === true ? \"required-input\" : \"\")}`}>{label}</label>\n      </div>\n      <div className=\"col-8\">\n        <input\n          id={name}\n          name={name} \n          type={type}\n          className={`form-control ${isInvalid ? \"is-invalid\" : \"\"}`} \n          value={values[name]} \n          onChange={handleChange} \n          onBlur={handleBlur} />\n      { isInvalid && <span className=\"text-danger col-12\">{errors[name]}</span> }\n      </div>\n    </div>\n  );\n}\n","import { TextInput } from '.';\nimport { FieldProps} from '../../types/FormTypes';\n\n/** Renders a controlled \\<input type=\"date\"\\> to taken in a Birthday */\nexport function BirthdayInput({ name }: FieldProps) {\n  return <TextInput name={name} type=\"date\" required label=\"Birthday\" />;\n}\n","export const Gender = {\n  MALE: \"Male\",\n  FEMALE: \"Female\",\n  NONBINARY: \"Non-Binary\"\n} as const;\n\n// Assumption: Parts of address is free-text\nexport type Address = {\n  addressLine: string;\n  cityProvince: string;\n  country: string;\n}\n\nexport type Contact = {\n  id: number; // Sequence number of contact\n  firstName: string;\n  lastName: string;\n  middleName: string;\n  birthday: Date;\n  gender?: typeof Gender[keyof typeof Gender];\n  address: Address;\n  emailAddress: string;\n  contactNumbers: string[];\n  companyName?: string;\n}\n\n\n","import { useFormContext } from '../../contexts/FormContext';\nimport { Gender } from '../../types/Contact';\nimport { FormValues, FieldProps } from '../../types/FormTypes';\n\n/** Renders a controlled input component for gender */\nexport function GenderSelect({ name }: FieldProps) {\n  const listOfGenders: string[] = [\"\", ...Object.values(Gender)];\n  const { values, handleChange, handleBlur, touched, errors } = useFormContext<FormValues>();\n\n  const isInvalid = touched[name] && errors[name];\n\n  return (\n    <div className=\"mb-2 row\">\n      <div className=\"col-4\">\n        <label htmlFor={name} className=\"form-label\">Gender</label>\n      </div>\n      <div className=\"col-8 mb-2\">\n        <select name={name}\n          className={`form-select ${isInvalid ? \"is-invalid\" : \"\"}`}\n          value={values[\"gender\"]}\n          onChange={handleChange}\n          onBlur={handleBlur}>\n          {listOfGenders.map(gender => <option key={gender}>{gender}</option>)}\n        </select>\n        {isInvalid && <div className=\"text-danger mb-2\">{errors[name]}</div>}\n      </div>\n    </div>\n  );\n}","import React from \"react\";\nimport { useFormContext } from \"../../contexts/FormContext\";\nimport { setPrimaryContactNumber } from \"../../shared/contactFunctions\";\nimport { FormValues, FieldProps } from \"../../types/FormTypes\";\n\ntype ContactNumbersInputProps = {\n  initialValue?: string[];\n} & FieldProps\n\n/** Custom input to get a list of contact numbers from a user  */\nexport function ContactNumbersInput({ name, initialValue }: ContactNumbersInputProps) {\n  const { setFormValues, touched, errors, handleBlur  } = useFormContext<FormValues>();\n  const [localValues, setLocalValues] = React.useState<string[]>([]);\n  const isInvalid = touched[name] && errors[name];\n\n  // Set initial value upon component mount if there is one \n  React.useEffect(() => {\n    if (initialValue) setLocalValues(initialValue);\n  }, [initialValue, setLocalValues]);\n\n  // Record  changes in local state in the state of the FormContext\n  React.useEffect(() => {\n    // TODO: Maybe there's a way to eliminate the need for a local state?\n    setFormValues(values => ({ ...values, [name]: localValues }));\n  }, [localValues, name, setFormValues]);\n\n  const addContactNumber = () => {\n    setLocalValues(values => [...values, \"\"]);\n  }\n\n  const handleRemove = (index: number) => {\n    setLocalValues(values => values.filter((_, i) => i !== index));\n  }\n\n  const handleLocalChange = (e: React.ChangeEvent<HTMLInputElement>, index: number) => {\n    const newValue = e.target.value;\n\n    // Test against the pattern stated in the input\n    if (!new RegExp(e.target.pattern).test(newValue)) return;\n    setLocalValues(values => values.map((value, i) => i === index ? e.target.value : value));\n  }\n\n  const handleSetPrimaryNumber = (index: number) => {\n    setLocalValues(values => setPrimaryContactNumber(values, values[index]));\n  }\n\n  return (\n    <fieldset className=\"my-4 row\">\n      <legend className=\"col-md-10 required-input\">Contact Numbers</legend>\n      <button type=\"button\" className=\"btn btn-primary col-md-2\" onClick={() => addContactNumber()}>Add Contact Number</button><br />\n      {\n        localValues.length > 0 &&\n        localValues.map((number, i) => {\n          return (\n            <div key={i} className=\"input-group mt-2 mb-1\">\n              { i === 0 && <span className=\"input-group-text\">Primary Contact</span> }\n            {/* Trying this one out: https://technology.blog.gov.uk/2020/02/24/why-the-gov-uk-design-system-team-changed-the-input-type-for-numbers/ */}\n              <input\n                className={`form-control ${isInvalid ? \"is-invalid\" : \"\"}`}\n                type=\"text\"\n                pattern=\"^[0-9]*$\"\n                inputMode=\"numeric\"\n                name={`${name}[${i}]`}\n                value={number}\n                onChange={(e) => handleLocalChange(e, i)}\n                onBlur={handleBlur}\n              />\n              {\n                i !== 0 && <button type=\"button\" className=\"btn btn-secondary\" onClick={() => handleSetPrimaryNumber(i)}>Set as Primary Contact</button>\n              }\n\n              <button type=\"button\" className=\"btn btn-danger\" onClick={() => handleRemove(i)}>Remove</button>\n            </div>\n          )\n        })\n      }\n      { isInvalid && <div className=\"text-danger\">{errors[name]}</div> }\n    </fieldset>\n  );\n}","import React, { useRef, useState } from 'react';\nimport { FormContextProvider } from '../../contexts/FormContext';\nimport { FormValues, FormErrors, FormTouched, FormInput } from '../../types/FormTypes';\nimport './Form.css';\n\ntype FormProps<T> = {\n  initialValues: T;\n  children: React.ReactNode;\n  onSubmit: (values: T) => void;\n  validate?: (values: T) => FormErrors;\n};\n\nexport function Form<T extends FormValues>({ initialValues, children, onSubmit, validate}: FormProps<T>) {\n  // React magic for managing form state\n  // Heavily inspired by Formik's APIs: http://formik.org/ \n  const [values, setFormValues] = useState<T>(initialValues);\n  const [errors, setFormErrors] = useState<FormErrors>({});\n  const [touched, setTouched] = useState<FormTouched<keyof T>>({});\n  const formRef = useRef<HTMLFormElement>(null);\n\n  // Perform validation on every change in values\n  React.useEffect(() => {\n    if (!validate) return;\n    \n    const errors = validate(values);\n    setFormErrors(errors);\n  }, [values, validate]);\n\n  function handleBlur(e: React.FocusEvent<FormInput>) {\n    setTouched(state => ({\n      ...state,\n      [e.target.name]: true\n    }))\n  }\n\n  function handleChange(e: React.ChangeEvent<FormInput>) {\n    const { name, value } = e.target;\n\n    setFormValues(state => ({\n      ...state,\n      [name]: value\n    }));\n  }\n\n  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n\n    // Set all fields as touched\n    setTouched(Object.keys(values)\n      .reduce((previousState, key) => ({ ...previousState, [key]: true }), {}));\n    \n    // Check if validate function detected errors\n    if (validate && Object.keys(validate(values)).length !== 0) { \n      setFormErrors(validate(values));\n    }\n    else {\n      onSubmit(values);\n    }\n  }\n\n  return (\n    <FormContextProvider value={{ values, handleChange, errors, setFormValues, handleBlur, touched}}>\n      <form ref={formRef} className=\"container-fluid\" onSubmit={(e) => handleSubmit(e)} noValidate>\n        {children}\n      </form>\n    </FormContextProvider>\n  );\n}","import { useContext, useState } from 'react';\nimport { Page, PageContext } from '../contexts/PageContext';\nimport { Contact } from '../types/Contact';\nimport ContactView from '../components/ContactViewModal';\nimport ContactsTable from '../components/ContactsTable';\nimport ContactsCards from '../components/ContactsCards';\nimport { Form, TextInput } from '../components/form';\n\ntype ContactsListProps = {\n  contacts: Contact[];\n  deleteContact: (contact: Contact) => void;\n}\n\nconst contactMatchesQuery = (contact: Contact, query: ContactsSearchQuery) => {\n  const contactNames = [contact.firstName, contact.middleName, contact.lastName]\n  \n  // As soon as the contact is found not to match the query, return false;\n  if (query.name && !contactNames.some(name => name.toLowerCase().includes(query.name.toLowerCase()))) {\n    return false;\n  }\n\n  if (query.email && !(contact.emailAddress.toLowerCase().includes(query.email.toLowerCase()))) {\n    return false;\n  }\n\n  if (query.cityProvince && !(contact.address.cityProvince.toLowerCase().includes(query.cityProvince.toLowerCase()))) {\n    return false;\n  }\n    \n  return true;\n}\n\n\nexport default function ContactsList({ contacts, deleteContact }: ContactsListProps): JSX.Element {\n  const { setCurrentPage } = useContext(PageContext);\n  const [contactShown, setContactShown] = useState<Contact | null>(null);\n  const [searchQuery, setSearchQuery] = useState<ContactsSearchQuery>({ name: '', email: '', cityProvince: ''});\n\n  const handleDelete = (contact: Contact) => {\n    const userConfirmed = window.confirm(\"Do you want to delete this contact? Click OK to confirm.\");\n\n    if (userConfirmed) {\n      deleteContact(contact);\n    }\n  }\n\n  const listProps = {\n    contacts: contacts.filter(c => contactMatchesQuery(c, searchQuery)),\n    setContactShown,\n    handleDelete\n  };\n\n  return (\n    <>\n      <div className=\"row mb-4 px-4\">\n        <p className=\"col-md-9 d-none d-md-inline\">Please click on a row to view the contact.</p>\n        <button className=\"btn btn-primary col-md-3\" onClick={() => setCurrentPage(Page.CREATE)}>Create Contact</button>\n      </div>\n      {/* Contact Modal */}\n      {contactShown && <ContactView contact={contactShown} onHide={() => setContactShown(null)} />}\n\n      <ContactsFilter onFilter={(query) => setSearchQuery(query)}/>\n\n      {/* Display the data table when screen is large enough */}\n      <div className=\"d-none d-md-block\">\n        <ContactsTable {...listProps} />\n      </div>\n\n      {/* Oherwise, display cards that are friendlier to small screens */}\n      <div className=\"d-md-none\">\n        <ContactsCards {...listProps} />\n      </div>\n    </>\n  );\n}\n\ninterface ContactsSearchQuery {\n  name: string,\n  email: string,\n  cityProvince: string\n}\n\ntype ContactsFilterProps = {\n  onFilter: (q: ContactsSearchQuery) => void;\n}\n\n// TODO: Refactor as a separate component\nfunction ContactsFilter({ onFilter }: ContactsFilterProps) {\n  const initialQuery: ContactsSearchQuery = {\n    name: '',\n    email: '',\n    cityProvince: ''\n  };\n\n  return (\n    <Form\n      initialValues={initialQuery}\n      onSubmit={values => {\n        onFilter({\n          name: values.name.trim(),\n          email: values.email.trim(),\n          cityProvince: values.cityProvince.trim()\n        });\n      }}\n    >\n      <p className=\"form-text\">Search Contact</p>\n      <div className=\"row mb-4\">\n        <div className=\"col-sm-6 col-lg-3 justify-content-end\">\n          <TextInput name=\"name\" label=\"Name\" />\n        </div>\n        <div className=\"col-sm-6 col-lg-3\">\n          <TextInput name=\"email\" label=\"Email\" />\n        </div>\n        <div className=\"col-sm-6 col-lg-4\">\n          <TextInput name=\"cityProvince\" label=\"City/Province\" />\n        </div>\n        <div className=\"col\">\n          <button type=\"submit\" className=\"btn btn-outline-dark w-100\">Search</button>\n        </div>\n      </div>\n    </Form>\n  );\n}","import { CreateFormValues } from '../pages/ContactCreate';\nimport { FormErrors } from '../types/FormTypes';\n\n/** Checks if the given value is null or whitespace */\n\nexport const isNullOrWhitespace = (value: string | null | undefined): boolean => {\n  if (value == null)\n    return true; // loose compare is intentional for checking null or undefined\n  return (value.trim() === \"\");\n};\n/** Returns true if given value is a valid email. */\n\nexport const isValidEmail = (value: string) => {\n  // Format pattern is based  https://en.wikipedia.org/wiki/Email_address#Syntax\n  const validEmailFormat = /^([a-z]|[A-Z]|\\d|\\.(?!\\.)|[!#$%&'*+-/=?^_`{|}~]){0,64}@([a-z]|[A-Z]|\\d|-|\\.){1,63}$/;\n  return validEmailFormat.test(value);\n};\n\n/** Forms a Contact from the given form values, or returns an error object if the contact cannot be parsed.\n * The error object contains the list of validation errors.\n */\n export function validateContact(values: CreateFormValues): FormErrors {\n  const errors: FormErrors = {};\n\n  if (isNullOrWhitespace(values.firstName)) {\n    errors.firstName = \"Please enter the contact's first name.\";\n  }\n\n  if (isNullOrWhitespace(values.middleName)) {\n    errors.middleName = \"Please enter the contact's middle name.\";\n  }\n\n  if (isNullOrWhitespace(values.lastName)) {\n    errors.lastName = \"Please enter the contact's last name.\";\n  }\n\n  // Assumption: Browser validation will be used for the birthday field\n  if (isNullOrWhitespace(values.birthday)) {\n    errors.birthday = \"Please enter a valid date for birthday.\";\n  }\n\n  if (isNullOrWhitespace(values[\"address.addressLine\"])) {\n    errors[\"address.addressLine\"] = \"Please enter an address line.\";\n  }\n\n  if (isNullOrWhitespace(values[\"address.cityProvince\"])) {\n    errors[\"address.cityProvince\"] = \"Please enter a city/province.\";\n  }\n\n  if (isNullOrWhitespace(values[\"address.country\"])) {\n    errors[\"address.country\"] = \"Please enter a country.\";\n  }\n\n  if (isNullOrWhitespace(values.email)) {\n    errors.email = \"Please enter an email address.\";\n  }\n  else if (!isValidEmail(values.email)) {\n    errors.email = \"Please enter a valid email address in the format (name@example.com).\";\n  }\n\n  if (values.contactNumbers.length < 3) {\n    errors.contactNumbers = \"Please enter at least three contact numbers\";\n  }\n  else if (values.contactNumbers.some(number => isNullOrWhitespace(number))) {\n    errors.contactNumbers = \"Please fill out or remove any empty rows.\";\n  }\n\n  return errors;\n}\n","import { useContext, useState } from 'react';\nimport { PageContext, Page } from '../contexts/PageContext';\nimport { Contact, Gender } from '../types/Contact';\nimport { TextInput, BirthdayInput, GenderSelect, ContactNumbersInput, Form } from '../components/form';\nimport { FormValues } from '../types/FormTypes';\nimport { validateContact } from '../shared/validations';\n\nexport interface CreateFormValues extends FormValues {\n  firstName: string,\n  middleName: string,\n  lastName: string,\n  birthday: string,\n  gender?: typeof Gender[keyof typeof Gender],\n  \"address.addressLine\": string,\n  \"address.cityProvince\": string,\n  \"address.country\": string,\n  companyName?: string,\n  contactNumbers: string[],\n  email: string\n}\n\ntype ContactCreateProps = {\n  createContact: (contact: Contact) => Promise<Contact>;\n}\n\n/** Form to create a contact record */\nexport default function ContactCreate({ createContact }: ContactCreateProps) {\n  const { setCurrentPage } = useContext(PageContext);\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n\n  const initialValues: CreateFormValues = {\n    firstName: \"\",\n    middleName: \"\",\n    lastName: \"\",\n    birthday: \"\",\n    \"address.addressLine\": \"\",\n    \"address.cityProvince\": \"\",\n    \"address.country\": \"\",\n    companyName: \"\",\n    contactNumbers: [],\n    email: \"\"\n  };\n\n  function goBack() {\n    setCurrentPage(Page.LIST);\n  }\n\n  return (\n    <div className=\"mt-2\">\n      <Form\n        initialValues={initialValues}\n        validate={validateContact}\n        onSubmit={(values) => {\n          setIsSubmitting(true);\n          createContact({\n            id: -1, // temporary ID to be replaced with a real one\n            firstName: values.firstName,\n            middleName: values.middleName,\n            lastName: values.lastName,\n            birthday: new Date(values.birthday),\n            gender: values.gender ? values.gender : undefined,\n            address: {\n              addressLine: values[\"address.addressLine\"],\n              cityProvince: values[\"address.cityProvince\"],\n              country: values[\"address.country\"]\n            },\n            companyName: values.companyName,\n            emailAddress: values.email,\n            contactNumbers: values.contactNumbers\n          })\n            .then((contact) => {\n              console.log(`Contact id=${contact.id} added!`);\n              goBack();\n            });\n        }}>\n        <h2>Create Contact</h2>\n        <p className=\"form-text\"><span className=\"text-danger\">*</span> indicates required fields.</p>\n\n        <TextInput name=\"firstName\" label=\"First Name\" required />\n        <TextInput name=\"middleName\" label=\"Middle Name\" required />\n        <TextInput name=\"lastName\" label=\"Last Name\" required />\n        <BirthdayInput name=\"birthday\" />\n        <TextInput type=\"email\" label=\"Email Address\" name=\"email\" required />\n        <TextInput name=\"companyName\" label=\"Company Name\" />\n\n        {/* Assumes gender is a select element */}\n        <GenderSelect name=\"gender\"/>\n\n        <fieldset name=\"address\" className=\"my-4\">\n          <legend>Address</legend>\n\n          <TextInput\n            label=\"Address Line\"\n            name=\"address.addressLine\"\n            required />\n\n          <TextInput\n            label=\"City/Province\"\n            name=\"address.cityProvince\"\n            required />\n\n          <TextInput\n            label=\"Country\"\n            name=\"address.country\"\n            required />\n        </fieldset>\n\n        <ContactNumbersInput name=\"contactNumbers\" />\n        \n        <div className=\"d-flex my-4\">\n          <input disabled={isSubmitting} type=\"submit\" className=\"btn btn-primary flex-grow-1 me-lg-2\" />\n          <button type=\"button\" className=\"btn btn-secondary flex-grow-1 ms-lg-2\" onClick={() => goBack()}>\n            Go Back\n          </button>\n        </div>\n      </Form>\n    </div >\n  )\n}","import { Contact, Gender } from \"../types/Contact\";\nimport { Page, PageContext } from \"../contexts/PageContext\";\nimport { useContext, useState } from \"react\";\nimport { BirthdayInput, ContactNumbersInput, Form, GenderSelect, TextInput } from \"../components/form\";\nimport { FormValues } from \"../types/FormTypes\";\nimport { validateContact } from \"../shared/validations\";\nimport { formatAsISODate } from \"../shared/contactFunctions\";\n\ntype ContactUpdateProps = {\n  updateContact: (c: Contact) => Promise<Contact>;\n}\n\nexport interface UpdateContactFormValues extends FormValues {\n  id: number,\n  firstName: string,\n  middleName: string,\n  lastName: string,\n  birthday: string,\n  gender?: typeof Gender[keyof typeof Gender],\n  \"address.addressLine\": string,\n  \"address.cityProvince\": string,\n  \"address.country\": string,\n  companyName?: string,\n  contactNumbers: string[],\n  email: string\n}\n\n/** Form to update an existing contact */\nexport default function ContactUpdate({ updateContact }: ContactUpdateProps) {\n  const { payload: contact, setCurrentPage } = useContext(PageContext);\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n\n  if (!contact) return <ContactUpdateErrorMessage />;\n\n  const initialValues: UpdateContactFormValues = {\n    id: contact.id,\n    firstName: contact.firstName,\n    middleName: contact.middleName,\n    lastName: contact.lastName,\n    birthday: formatAsISODate(contact.birthday),\n    gender: contact.gender,\n    \"address.addressLine\": contact.address.addressLine,\n    \"address.cityProvince\": contact.address.cityProvince,\n    \"address.country\": contact.address.country,\n    companyName: contact.companyName,\n    contactNumbers: contact.contactNumbers,\n    email: contact.emailAddress,\n  }\n\n  return (\n    <div>\n      <Form\n        initialValues={initialValues}\n        validate={validateContact}\n        onSubmit={(values) => {\n          setIsSubmitting(true);\n          // Make Contact from contact form values\n          const updatedContact: Contact = {\n            id: values.id,\n            firstName: values.firstName,\n            middleName: values.middleName,\n            lastName: values.lastName,\n            birthday: new Date(values.birthday),\n            address: {\n              addressLine: values[\"address.addressLine\"],\n              cityProvince: values[\"address.cityProvince\"],\n              country: values[\"address.country\"]\n            },\n            companyName: values.companyName,\n            emailAddress: values.email,\n            contactNumbers: values.contactNumbers\n          }\n          \n          updateContact(updatedContact)\n            .then(contact => {\n              setCurrentPage(Page.LIST);\n              console.log(\"Updated contact with id: \", contact.id);\n            })\n            .catch(err => {\n              console.error(\"Error occured! \", err); // TODO: Replace with appropriate logger\n              setIsSubmitting(false);\n            });\n        }}\n      >\n        <h2>Update a Contact</h2>\n        <p className=\"form-text\"><span className=\"text-danger\">*</span> indicates required fields.</p>\n\n        <TextInput name=\"firstName\" label=\"First Name\" required />\n        <TextInput name=\"middleName\" label=\"Middle Name\" required />\n        <TextInput name=\"lastName\" label=\"Last Name\" required />\n        <BirthdayInput name=\"birthday\" />\n        <TextInput type=\"email\" label=\"Email Address\" name=\"email\" required />\n        <TextInput name=\"companyName\" label=\"Company Name\" />\n\n        {/* Assumes gender is a select element */}\n        <GenderSelect name=\"gender\"/>\n\n        <fieldset name=\"address\" className=\"my-4\">\n          <legend>Address</legend>\n\n          <TextInput\n            label=\"Address Line\"\n            name=\"address.addressLine\"\n            required />\n\n          <TextInput\n            label=\"City/Province\"\n            name=\"address.cityProvince\"\n            required />\n\n          <TextInput\n            label=\"Country\"\n            name=\"address.country\"\n            required />\n        </fieldset>\n\n        <ContactNumbersInput name=\"contactNumbers\" initialValue={initialValues.contactNumbers} />\n        \n        <div className=\"d-flex my-4\">\n          <input disabled={isSubmitting} type=\"submit\" className=\"btn btn-primary flex-grow-1 me-lg-2\" />\n          <button type=\"button\" className=\"btn btn-secondary flex-grow-1 ms-lg-2\" onClick={() => setCurrentPage(Page.LIST)}>\n            Go Back\n          </button>\n        </div>\n      </Form>\n    </div>\n  );\n}\n\n/** Displays an error message in case ContactUpdate was rendered without a passed in Contact. */\nfunction ContactUpdateErrorMessage() {\n  const { setCurrentPage } = useContext(PageContext);\n  return (\n    <div className=\"text-center\">\n      <p className=\"text-danger\">Error while updating contact! No contact was selected for updating.</p>\n      <button onClick={() => setCurrentPage(Page.LIST)}>Go back</button>\n    </div>\n  );\n}","import { Contact, Gender } from \"./types/Contact\";\n\nexport const sampleContacts: Contact[] = [{\n  id: 1,\n  firstName: \"John\",\n  lastName: \"Doe\",\n  middleName: \"Q.\",\n  birthday: new Date(1970, 1, 1),\n  gender: Gender.MALE,\n  address: {\n    addressLine: \"5 Oak Way\",\n    cityProvince: \"Sample City\",\n    country: \"Philippines\"\n  },\n  emailAddress: \"john.doe@example.com\",\n  contactNumbers: [\"848 6670\"],\n  companyName: \"Alphabet, Inc.\"\n},\n{\n  id: 2,\n  firstName: \"Mary\",\n  lastName: \"Sue\",\n  middleName: \"A.\",\n  birthday: new Date(1986, 10, 7),\n  address: {\n    addressLine: \"10 Gaviria St.\",\n    cityProvince: \"Sample City\",\n    country: \"Philippines\"\n  },\n  emailAddress: \"mary.sue1@example.com\",\n  contactNumbers: [\"987 6543\", \"445 6650\"]\n}];","import { useEffect, useState } from 'react';\nimport { sampleContacts } from '../sampleContacts';\nimport { Contact } from '../types/Contact';\n\nconst DELAY_TIME = 700;\nconst delay = () => new Promise((resolve) => setTimeout(resolve, DELAY_TIME));\n\n/** Custom hook for data operations. Simulates a backend that is asynchronous for CRUD contacts */ \nexport function useContactsDelay() {\n  const [contacts, setContacts] = useState<Contact[]>([]);\n\n  useEffect(() => {\n    setContacts(sampleContacts);\n  }, []);\n\n  function isExistingContact(testContact: Contact) {\n    return contacts.find(c => c.id === testContact.id) !== undefined;\n  }\n\n  /** Adds a contact to the list of contacts */\n  async function createContact(newContact: Contact) {\n    const oldContacts = [...contacts];\n    setContacts(contacts => [newContact, ...contacts]);\n    \n    try {\n      await delay();\n    } catch (e) {\n      console.error(`An error occured! ${e}`) // Enhancement: replace with appropriate logger\n      setContacts(oldContacts); // rollback\n    }\n\n    return newContact;\n  }\n\n  /** Updates an existing contact */\n  async function updateContact(updatedContact: Contact) {\n    const oldContacts = [...contacts];\n    setContacts(contacts => contacts.map(contact => (contact.id === updatedContact.id) ? updatedContact : contact));\n    \n    try {\n      await delay();\n      if (!isExistingContact(updatedContact)) throw new Error(`${updatedContact} is not an existing contact!`);\n    } catch (e) {\n      console.error(`An error occured! ${e}`) // Enhancement: replace with appropriate logger\n      setContacts(oldContacts);\n    }\n    \n    return updatedContact;\n  }\n\n  /** Deletes a contact that is placed in */\n  async function deleteContact(contactToDelete: Contact) {\n    const oldContacts = [...contacts];\n    setContacts(contacts => contacts.filter(c => c.id !== contactToDelete.id));\n\n    try {\n      await delay();\n      if (!isExistingContact(contactToDelete)) throw new Error(`${contactToDelete} is not an existing contact!`);\n    } catch (e) {\n      console.error(`An error occured! ${e}`) // replace with appropriate logger\n      setContacts(oldContacts);\n    }\n  }\n\n  return { contacts, addContact: createContact, updateContact, deleteContact };\n}\n","import { ContactCreate, ContactUpdate, ContactsList } from \"./pages\";\nimport { Page, PageContextProvider, PagePortal } from './contexts/PageContext';\nimport { useContactsDelay } from './hooks/useContacts';\n\nexport default function App(): JSX.Element {\n  const { contacts, addContact, deleteContact, updateContact } = useContactsDelay();\n\n  return (\n    <div className=\"container-lg mt-2 mt-md-5\">\n      <h1 className=\"text-muted mb-4\">My Contacts</h1>\n      <PageContextProvider initialPage={Page.LIST}>\n        <PagePortal showFor={Page.CREATE}>\n          <ContactCreate createContact={addContact} />\n        </PagePortal>\n\n        <PagePortal showFor={Page.UPDATE}>\n            <ContactUpdate updateContact={updateContact} />\n        </PagePortal>\n\n        <PagePortal showFor={Page.LIST}>\n          <ContactsList contacts={contacts} deleteContact={deleteContact} />\n        </PagePortal>\n      </PageContextProvider>\n    </div>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}